fn heart_rate_status(bpm: u8) -> char {
    // –ü—Ä–∏–º–µ—Ä –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
    let result = if bpm < 50 {
        'üê¢'
    } else if bpm < 100 {
        'üôÇ'
    } else {
        'üî•'
    };

    return result;
}

enum Command {
    Quit,
    Move { x: i32, y: i32 },
}

enum UserRole {
    Guest,
    Moderator,
    Admin,
}

struct User {
    name: String,
    role: UserRole,
    active: bool,
}

pub fn fake_main() {
    let cmd = Command::Move { x: 5, y: 10 };

    if let Command::Move { x, y } = cmd {
        println!("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è: ({x},{y})");
    }

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –∫–æ—Ä—Ç–µ–∂–µ–º
    let transaction = (1500.0, "USD", 200);

    // –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2-–π –∏ 3-–π —ç–ª–µ–º–µ–Ω—Ç ...
    // ... —Ç–æ–ª—å–∫–æ `USD` –∏ `status_code == 200`
    if let (amount, "USD", 200) = transaction {
        println!("–£—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç—ë–∂: ${} USD", amount);
    }

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å –º–∞—Å—Å–∏–≤–∞–º–∏
    let download_progress = [0, 25, 50, 75, 100];

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 0% !
    if let [0, .., completion] = download_progress {
        if completion == 100 {
            println!("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
        }
    };

    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    let new_user = User {
        name: "–ê–ª–∏—Å–∞".to_string(),
        role: UserRole::Admin,
        active: true,
    };

    // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–π Admin !
    if let User {
        name,
        role: UserRole::Admin,
        active: true,
    } = new_user
    {
        println!("–£ –Ω–∞—Å –Ω–æ–≤—ã–π –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {}", name);
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ –∫–æ—Ä—Ç–µ–∂–∞
    let config = ("localhost", 8080);

    // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    let ("localhost", port) = config else {
        // –í–æ–∑–≤—Ä–∞—Ç `never` (–ø–∞–Ω–∏–∫–∞)
        panic!("–û–∂–∏–¥–∞–ª—Å—è —Ö–æ—Å—Ç 'localhost', –ø–æ–ª—É—á–µ–Ω: {}", config.0);
    };

    println!("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:{}", port);

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞
    let upload_progress = [0, 25, 50, 75, 100];

    // –†–∞–Ω–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    let [0, .., 100] = upload_progress else {
        println!("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å");
        // –í–æ–∑–≤—Ä–∞—Ç `never`
        return;
    };

    println!("–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");

    let dice_roll = 9;

    match dice_roll {
        3 => println!("–ü–æ–ª—É—á–µ–Ω –±–æ–Ω—É—Å!"),
        7 => println!("–ü–æ—Ç–µ—Ä—è —Ö–æ–¥–∞."),
        _ => println!("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∏–≥—Ä—É."),
    }

    let age = 25;

    match age {
        0..=12 => println!("–†–µ–±—ë–Ω–æ–∫"),
        13..=19 => println!("–ü–æ–¥—Ä–æ—Å—Ç–æ–∫"),
        20..=64 => println!("–í–∑—Ä–æ—Å–ª—ã–π"),
        _ => println!("–ü–æ–∂–∏–ª–æ–π"),
    }

    let some_point = (1, 20);

    match some_point {
        (0, 0) => println!("–ù–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"),
        (x, 0) => println!("–ù–∞ –æ—Å–∏ X: x = {}", x),
        (0, y) => println!("–ù–∞ –æ—Å–∏ Y: y = {}", y),
        (x, y) => println!("–¢–æ—á–∫–∞: ({}, {})", x, y),
    } 



}
