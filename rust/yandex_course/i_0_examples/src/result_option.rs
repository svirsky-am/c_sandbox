// enum Option<T> {
//     Some(T),
//     None,
// }

// –ù–∞–π—Ç–∏ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª–∏–Ω–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
fn find_long_word(words: &[String]) -> Option<&String> {
    for word in words {
        if word.len() > 5 {
            return Some(word); // –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
        }
    }
    None // –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
}

fn print_first_even(numbers: &[i32]) {
    // –ü–æ–ø—ã—Ç–∫–∞ –≤–∑—è—Ç—å –ø–µ—Ä–≤–æ–µ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    let Some(n) = numbers.iter().find(|&&x| x % 2 == 0) else {
        println!("–ß—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–µ—Ç");
        return;
    };

    println!("–ü–µ—Ä–≤–æ–µ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ: {}", n);
}

fn find_first_even(numbers: &[i32]) -> Option<i32> {
    for &num in numbers {
        if num % 2 == 0 {
            return Some(num); // –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Å–ª–æ–≤–æ
        }
    }
    None // –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
}

// enum Result<T, E> {
//     Ok(T),  // —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ T)
//     Err(E), // –æ—à–∏–±–∫–∞ (–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ E)
// }

// T ‚Äî —ç—Ç–æ —Ç–∏–ø —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.
// E ‚Äî —ç—Ç–æ —Ç–∏–ø –æ—à–∏–±–∫–∏.

fn divide(a: i32, b: i32) -> Result<i32, String> {
    if b == 0 {
        Err("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å".to_string())
    } else {
        Ok(a / b)
    }
}

//divide(10, 5) -> Ok(2)
//divide(10, 0) -> Err("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å")

// use std::num::ParseIntError;

// fn parse_and_double(s: &str) -> Result<i32, ParseIntError> {
//     match s.parse::<i32>() {
//         Ok(n) => Ok(n * 2),
//         Err(e) => Err(e),
//     }
// }

use std::num::ParseIntError;

fn parse_and_double(input: &str) -> Result<i32, ParseIntError> {
    // dbg!(&s);
    // let number = input.parse::<i32>()?;
    // Ok(number * 2)

    match input.parse::<i32>() {
        Ok(n) => Ok(n * 2),
        // Err(n) => Err("–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å".to_string()), // Err(n) => Err(std::num::ParseIntError), // Err(e) => Err(e),
        Err(n) => Err(n), // Err(n) => Err(std::num::ParseIntError), // Err(e) => Err(e),
    }
}

#[derive(Debug, PartialEq)]
enum MathError {
    DivisionByZero,
}

fn safe_divide(a: f64, b: f64) -> Result<f64, MathError> {
    // –í–∞—à –∫–æ–¥ –∑–¥–µ—Å—å
    if (b == 0.0) {
        return Err(MathError::DivisionByZero);
    }
    Ok(a / b)
}

// –û–ø–µ—Ä–∞—Ç–æ—Ä ? (Question Mark)

// //–í–º–µ—Å—Ç–æ —è–≤–Ω–æ–≥–æ match

// fn read_file(path: &str) -> std::io::Result<String> {
//     match std::fs::read_to_string(path) {
//         Ok(content) => Ok(content),
//         Err(e) => return Err(e),
//     }
// }

fn read_file(path: &str) -> std::io::Result<String> {
    match std::fs::read_to_string(path) {
        Ok(content) => Ok(content),
        Err(e) => return Err(e),
    }
}

pub fn fake_main() {
    let x = Some(5); // –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å
    let y: Option<i32> = None; // –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ—Ç

    // 1. match. –ü–æ–ª–Ω–∞—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
    let number = Some(10);

    match number {
        Some(n) => println!("–ù–∞—à–ª–∏ —á–∏—Å–ª–æ: {}", n),
        None => println!("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏"),
    } // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –ù–∞—à–ª–∏ —á–∏—Å–ª–æ: 10

    // 2. if let. –£–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –µ—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Ç–æ–ª—å–∫–æ Some –∏–ª–∏ —Ç–æ–ª—å–∫–æ None:

    let number: Option<i32> = Some(7);

    if let Some(n) = number {
        println!("–ù–∞—à–ª–∏ —á–∏—Å–ª–æ: {}", n);
    } else {
        println!("–ù–∏—á–µ–≥–æ –Ω–µ—Ç");
    }

    // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –ù–∞—à–ª–∏ —á–∏—Å–ª–æ: 7

    let number: Option<i32> = None;

    if let None = number {
        println!("–ß–∏—Å–ª–∞ –Ω–µ—Ç");
    } else {
        println!("–ù–∞—à–ª–∏ —á–∏—Å–ª–æ!");
    } // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –ß–∏—Å–ª–∞ –Ω–µ—Ç

    // 3. unwrap. –ë–µ—Ä—ë—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Some, –Ω–æ —É–ø–∞–¥—ë—Ç —Å –ø–∞–Ω–∏–∫–æ–π, –µ—Å–ª–∏ —Ç–∞–º None:
    let a = Some(42);
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ: {}", a.unwrap()); // 42

    let b: Option<i32> = None;
    // println!("{}", b.unwrap()); // üí• panic

    // 4. expect. –¢–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ unwrap, –Ω–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:
    let a = Some("Rust");
    println!("–ó–Ω–∞—á–µ–Ω–∏–µ: {}", a.expect("–û–∂–∏–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É"));

    let b: Option<&str> = None;
    // println!("{}", b.expect("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å!"));
    // panic —Å —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (–∞–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã)

    // 5. let-else. –£–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å—Ä–∞–∑—É –∏–∑–≤–ª–µ–∫–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ Option, –∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ‚Äî –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–ª–∏ –¥–µ–ª–∞—Ç—å return, break, continue.
    let nums1 = vec![1, 3, 5, 7];
    let nums2 = vec![1, 4, 5, 6];

    print_first_even(&nums1); // –ß—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –Ω–µ—Ç
    print_first_even(&nums2); // –ü–µ—Ä–≤–æ–µ —á—ë—Ç–Ω–æ–µ —á–∏—Å–ª–æ: 4

    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 1: –ø–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ
    // –¢–µ—Å—Ç—ã
    assert_eq!(find_first_even(&[1, 3, 4, 7, 8]), Some(4));
    assert_eq!(find_first_even(&[1, 3, 5, 7]), None);
    println!("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!");

    // # –¢–∏–ø Result<T, E>

    let inputs = ["50", "abc"];
    dbg!(&inputs);

    for s in &inputs {
        match parse_and_double(s) {
            Ok(v) => println!("–£–¥–≤–æ–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {}", v),
            Err(e) => println!("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {}", e),
        }
    }

    // –£—Å–ø–µ—à–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    if let Ok(value) = divide(10, 2) {
        println!("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}", value);
    }

    // –õ–æ–≤–∏–º –æ—à–∏–±–∫—É
    if let Err(error) = divide(10, 0) {
        println!("–û—à–∏–±–∫–∞: {}", error);
    }

    // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –û—à–∏–±–∫–∞: –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
    // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –†–µ–∑—É–ª—å—Ç–∞—Ç: 5

    if let Ok(value) = divide(10, 2) {
        println!("–†–µ–∑—É–ª—å—Ç–∞—Ç: {}", value);
    } else {
        println!("–û—à–∏–±–∫–∞"); // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ–∫—Å—Ç—É –æ—à–∏–±–∫–∏ 
    }

    if let Err(error) = divide(10, 0) {
        println!("–û—à–∏–±–∫–∞: {}", error);
    } else {
        println!("–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ"); // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–Ω–∞—á–µ–Ω–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
    }

    // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ 2: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ
    // –¢–µ—Å—Ç—ã
    assert_eq!(safe_divide(10.0, 2.0), Ok(5.0));
    assert_eq!(safe_divide(10.0, 0.0), Err(MathError::DivisionByZero));
    println!("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!");
}
