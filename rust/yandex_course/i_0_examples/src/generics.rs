#![allow(dead_code)]
#![allow(unused_variables)]

fn swap<T>(a: T, b: T) -> (T, T) {
    (b, a)
}

trait Active {
    // –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
    // –ö–∞–∂–¥—ã–π —Ç–∏–ø, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π —Ç—Ä–µ–π—Ç, –º–æ–∂–µ—Ç —Å–∞–º —Ä–µ—à–∏—Ç—å,
    // –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ—ë —Å–æ—Å—Ç–æ—è–Ω–∏–µ:
    // –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, —Å–∏–º–≤–æ–ª, —á–∏—Å–ª–æ –∏ —Ç. –¥.
    type Status;

    // –ê—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞
    // –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ —Å—É—â–Ω–æ—Å—Ç–∏
    const ENTITY_TYPE: &'static str;

    // –ú–µ—Ç–æ–¥—ã

    // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∏–ø
    // (–Ω–∞–ø—Ä–∏–º–µ—Ä, true, 'üî¥', "Active")

    fn status(&self) -> Self::Status;

    // –ú–µ—Ç–æ–¥-—Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    fn is_active(&self) -> bool;

    // –ú–µ—Ç–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    fn activate(&mut self);

    // –ú–µ—Ç–æ–¥ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    fn deactivate(&mut self);

    // –ú–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    fn toggle(&mut self) {
        if self.is_active() {
            self.deactivate();
        } else {
            self.activate();
        }
    }
}

struct Sensor {
    active: bool,
}

impl Active for Sensor {
    type Status = char;

    const ENTITY_TYPE: &'static str = "SmartDevice";

    fn status(&self) -> Self::Status {
        if self.active { 'üü¢' } else { 'üî¥' }
    }

    fn is_active(&self) -> bool {
        self.active
    }

    fn activate(&mut self) {
        self.active = true;
    }

    fn deactivate(&mut self) {
        self.active = false;
    }
}

struct Feature {
    enabled: bool,
    active: bool,
}

impl Active for Feature {
    type Status = &'static str;

    const ENTITY_TYPE: &'static str = "Feature";

    fn status(&self) -> Self::Status {
        if self.active { "enabled" } else { "disabled" }
    }

    fn is_active(&self) -> bool {
        self.enabled
    }

    fn activate(&mut self) {
        self.enabled = true;
    }

    fn deactivate(&mut self) {
        self.enabled = false;
    }
}

// —Ç–æ–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
// fn start(component: &mut impl Active) {
fn start<T: Active>(component: &mut T) {
    component.activate();
}

#[derive(Default)]
struct Field<T> {
    value: T,
    is_valid: bool,
}

// alternative fof #[derive(Default)]

// impl<T: Default> Default for Field<T> {
//     fn default() -> Self {
//         Self {
//             value: T::default(),
//             is_valid: bool::default(),
//         }
//     }
// }

pub fn fake_main() {
    let field: Field<i32> = Field::default();

    // false (–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è bool)
    println!("{}", field.is_valid);
}
